            from core import offsets, GetOffset, Game, ConvertToGameValue
            from memory import BuildPlayer, WriteBinaryBytes, GetTeamData, GetTeamAddress
            from actions import BuildPlayerList, ReplacePlayer, TradePlayer
            
            # ########################################################### #
            # LOOPING THROUGH EVERY TEAM AND ITS DATA                     #
            # ########################################################### #

            # Let's loop through every team
            # team_base_address = game.memory.read_bytes(game.base_address + offsets["Base"]["Team Base Address"], 8)
            # team_base_address = int.from_bytes(team_base_address, byteorder='little')
            # team_offset_length = offsets["Base"]["Team Offset Length"]  # Length of each team entry in memory

            # with open("team_data_dump.txt", "w") as f:
            #     for i in range(5000):
            #         try:
            #             team_address = GetTeamData(game, team_base_address + (team_offset_length * i))
            #             print(f"[bold green]Team Index:[/bold green] {i} | [bold blue]Name:[/bold blue] {team_address['Name']} | [bold yellow]Year:[/bold yellow] {team_address['Year']} | [bold magenta]Type:[/bold magenta] {team_address['Type']}")
            #             f.write(f"Team Index: {hex(i)} | Name: {team_address['Name']} | Year: {team_address['Year']} | Type: {team_address['Type']}\n")
            #         except Exception as e:
            #             print(f"[bold red]{hex(i)}: {e}[/bold red]")
                        # continue

            # ########################################################### #
            # DUMP PLAYER DATA BASED ON A USER SEARCH FOR A PLAYER NAME   #
            # ########################################################### #

            # Build a list of players from the game memory
            # list_builder = BuildPlayerList(game, PLAYER_LIST_SIZE)
            # list_builder.run(export=False, singular=False)
            # # versions = list_builder.find_versions()
            # search = input("\nEnter a player name to search for: ")
            # player, versions = list_builder.find_player_by_name(search)
            # if player:
            #     # Print the player details and any versions found
            #     # with open(f"{player}.json", "w") as f:
            #     #     f.write(player.to_json())
            #     # Write new number to driving layup address
            #     import time
            #     offset_data = GetOffset("Attributes", "Driving Layup")
            #     for i in range(25, 111):
            #         game_value = ConvertToGameValue(i, offset_data["length"])
            #         WriteBinaryBytes(game, player.address + offset_data["offset"], offset_data["length"], game_value)
            #         time.sleep(0.2)
            #         rprint(f"Success! [green]Successfully wrote {i} to {player}'s driving layup.[/green]")
            # else:
            #     print("\nThere was no player found with that name.")            

            # ########################################################### #
            # FINDING versions BASED ON A USER SEARCH FOR A PLAYER NAME #
            # ########################################################### #

            # while True:
            #     # Search for player, it's first instance, and all versions by name
            #     search = input("\nEnter a player name to search for: ")
            #     player, versions = list_builder.find_player_by_name(search)
            #     # Print the player details and any versions found
            #     if player and versions:
            #             print(f"\nFound {len(versions)} instance(s) of {search.upper()}:\n")
            #             for team, address in versions.items():
            #                 print(f"- ({team}) {address}")
            #         else:
            #             print(f"\nThere were no versions found for this player.")
            #     else:
            #         print("\nThere was no player found with that name.")

            # with open("versions.json", "w") as f:
            #     import json
            #     json.dump(versions, f, indent=4)







            			# ✅ Attribute test
			# for attribute in offsets["Attributes"]:
			# 	name, offset, length = attribute["name"], attribute["offset"], attribute["length"]
			# 	address = test_player.address + offset
			# 	new_value = 25
			# 	game_value = ConvertToGameValue(new_value, length)
			# 	WriteBinaryBytes(game, address, length, game_value)
			# 	print(f"Wrote Bytes {new_value} to {name}")

			# ✅ Badge test 
			# for badge in offsets["Badges"]:
			# 	name, offset, length, start_bit = badge["name"], badge["offset"], badge["length"], badge["startBit"]
			# 	address = test_player.address + offset
			# 	new_value = 1
			# 	WriteInteger(game, address, length, start_bit, new_value)
			# 	print(f"Wrote Integer {new_value} to {name}")

			# ✅ Tendency test
			# for tendency in offsets["Tendencies"]: 
			# 	name, offset, length, start_bit = tendency["name"], tendency["offset"], tendency["length"], tendency["startBit"]
			# 	address = test_player.address + offset
			# 	new_value = 0
			# 	WriteInteger(game, address, length, start_bit, new_value)
			# 	print(f"Wrote Integer {new_value} to {name}")

			# ✅ Signature test
			# for signature in offsets["Signatures"]:
			# 	name, offset, length, start_bit = signature["name"], signature["offset"], signature["length"], signature["startBit"]
			# 	address = test_player.address + offset
			# 	new_value_code, new_value_repr = 0, ""
			# 	if name in conversion_list:
			# 		new_value_repr = random.choice(list(conversion_list[name].values()))
			# 		new_value_code = GetCodeFromString(name, new_value_repr)
			# 		WriteInteger(game, address, length, start_bit, new_value_code)
			# 		print(f"Wrote '{new_value_repr}' to {name}")
			# 	else:
			# 		print(f"[red]Error: {name} not found in conversion list.[/red]")
			# 		continue

			# ✅ Gear test
			# for gear in offsets["Gear"]:
			# 	try:
			# 		name, offset, length, start_bit = gear["name"], gear["offset"], gear["length"], gear["startBit"]
			# 		address = test_player.address + offset
			# 		new_value_code, new_value_repr = 0, ""
			# 		if name in conversion_list:
			# 			new_value_repr = random.choice(list(conversion_list[name].values()))
			# 			new_value_code = GetCodeFromString(name, new_value_repr)
			# 			WriteInteger(game, address, length, start_bit, new_value_code)
			# 			print(f"Wrote '{new_value_repr}' to {name}")
			# 		else:
			# 			print(f"[red]Error: {name} not found in conversion list.[/red]")
			# 			continue
			# 	except Exception as e:
			# 		line_no = e.__traceback__.tb_lineno
			# 		print(f"[red]Error writing gear to memory at line {line_no}: {e}[/red]")
			# 		continue

			# ✅ Hotzone test
			# for hotzone in offsets["Hotzones"]:
			# 	try:
			# 		name, offset, length, start_bit = hotzone["name"], hotzone["offset"], hotzone["length"], hotzone["startBit"]
			# 		address = test_player.address + offset
			# 		new_value_code, new_value_repr = 0, ""
			# 		if name in conversion_list:
			# 			new_value_repr = random.choice(list(conversion_list[name].values()))
			# 			new_value_code = GetCodeFromString(name, new_value_repr)
			# 			WriteInteger(game, address, length, start_bit, new_value_code)
			# 			print(f"Wrote '{new_value_repr}' to {name}")
			# 		else:
			# 			print(f"[red]Error: {name} not found in conversion list.[/red]")
			# 			continue
			# 	except Exception as e:
			# 		line_no = e.__traceback__.tb_lineno
			# 		print(f"[red]Error writing gear to memory at line {line_no}: {e}[/red]")
			# 		continue

			# ✅ Accessory test
			# for accessory in offsets["Accessories"]:
			# 	try:
			# 		name, offset, length, start_bit = accessory["name"], accessory["offset"], accessory["length"], accessory["startBit"]
			# 		address = test_player.address + offset
			# 		new_value_code, new_value_repr = 0, ""
			# 		if name in conversion_list:
			# 			new_value_repr = random.choice(list(conversion_list[name].values()))
			# 			new_value_code = GetCodeFromString(name, new_value_repr)
			# 			WriteInteger(game, address, length, start_bit, new_value_code)
			# 			print(f"Wrote '{new_value_repr}' to {name}")
			# 		else:
			# 			print(f"[red]Error: {name} not found in conversion list.[/red]")
			# 			continue
			# 	except Exception as e:
			# 		line_no = e.__traceback__.tb_lineno
			# 		print(f"[red]Error writing gear to memory at line {line_no}: {e}[/red]")
			# 		continue

			# ✅ Vital test
			# for vital in offsets["Vitals"]:
			# 	try:
			# 		name, offset, length, start_bit = vital["name"], vital["offset"], vital["length"], vital["startBit"]
			# 		address = test_player.address + offset
			# 		new_value_code, new_value_repr = 0, ""
			# 		if name in conversion_list:
			# 			new_value_repr = random.choice(list(conversion_list[name].values()))
			# 			new_value_code = GetCodeFromString(name, new_value_repr)
			# 			WriteInteger(game, address, length, start_bit, new_value_code)
			# 			print(f"Wrote '{new_value_repr}' to {name}")
			# 		else:
			# 			print(f"[red]Error: {name} not found in conversion list.[/red]")
			# 			continue
			# 	except Exception as e:
			# 		line_no = e.__traceback__.tb_lineno
			# 		print(f"[red]Error writing gear to memory at line {line_no}: {e}[/red]")
			# 		continue